/**
 * Game
 *
 * connects the environment to the ecs
 */
module example.core {

  import Container = PIXI.Container;
  import Sprite = PIXI.Sprite;
  import SystemRenderer = PIXI.SystemRenderer;
  import GameSystems = example.core.GameSystems;
  import Constants = example.core.Constants;
  import EntitySystem = artemis.EntitySystem;
  import ScaleType = example.core.ScaleType;
  import AbstractFilter = PIXI.AbstractFilter;
  import MathUtils = artemis.utils.MathUtils;

  export class Game {

    public sprites:Container;
    public renderer:SystemRenderer;
    public systems:GameSystems;
    private delta:number=0;
    private previousTime:number=0;

    /**
     * Load assets and start
     */
    public static main() {
      for (var asset in Constants.assets) {
        PIXI.loader.add(asset, Constants.assets[asset]);
      }
      PIXI.loader.load((loader, resources) => new Game(resources));
    }

    /**
     * Create the game instance
     * @param resources
     */
    constructor(resources) {

      this.sprites = new Container();
      EntitySystem.blackBoard.setEntry('sprites', this.sprites);
      EntitySystem.blackBoard.setEntry('resources', resources);

      var renderer = this.renderer = PIXI.autoDetectRenderer(Constants.FRAME_WIDTH, Constants.FRAME_HEIGHT, {backgroundColor:0x000000});
      switch (Constants.SCALE_TYPE) {
        case ScaleType.FILL:
          this.renderer.view.style.position = 'absolute';
          break;
        case ScaleType.FIXED:
          renderer.view.style.position = 'absolute';
          renderer.view.style.width = window.innerWidth + 'px';
          renderer.view.style.height = window.innerHeight + 'px';
          renderer.view.style.display = 'block';
          break;
      }
      document.body.appendChild(this.renderer.view);
      window.addEventListener('resize', this.resize, true);
      window.onorientationchange = this.resize;
      this.menu(resources);
    }

    menu(resources) {

      var stage = new Container();

      var shader = new AbstractFilter(null, resources.parallaxStars_frag.data, {
        time: {type: 'f', value: performance.now()/1000},
        resolution: {type: '2f', value: [window.innerHeight, window.innerWidth]}
      });

      var bgd = new PIXI.Sprite();
      bgd.width = window.innerWidth;
      bgd.height = window.innerHeight;
      bgd.filters = [shader];

      var text = new PIXI.Text('Schmup\n  Wars', {
        font : 'bold 60px OpenDyslexic',
        fill : '#F7EDCA',
        stroke : '#4a1850',
        strokeThickness : 5,
        dropShadow : true,
        dropShadowColor : '#000000',
        dropShadowAngle : Math.PI / 6,
        dropShadowDistance : 6,
        wordWrap : true,
        wordWrapWidth : 440

      });
      text.anchor.set(.5);
      text.x = Constants.FRAME_WIDTH/2;
      text.y = Constants.FRAME_HEIGHT/2;

      var slogan = [
        'Give me those Schmup Wars',
        "I [heart] URANUS",
        'May the Schmup be with you',
        "So, at last we meet for the first time for the last time",
        "I am your father's brother's nephew's cousin's ex wife's lawyer's father's ...",
        'The schmup is strong in this one',
        "Prepare for ludicrous speed!",
        'Schmup is the path to the dark side',
        "There goes the planet."
      ];
      var message = new PIXI.Text(slogan[MathUtils.nextInt(slogan.length)], {
        font : 'bold 20px OpenDyslexic',
        fill : '#F7EDCA',
        stroke : '#4a1850',
        strokeThickness : 5,
        dropShadow : true,
        dropShadowColor : '#000000',
        dropShadowAngle : Math.PI / 6,
        dropShadowDistance : 6,
        wordWrap : true,
        wordWrapWidth : 440

      });
      message.anchor.set(.5);
      message.x = Constants.FRAME_WIDTH/2;
      message.y = Constants.FRAME_HEIGHT/2 + 100;

      var uniforms = shader.uniforms;
      var start = performance.now();
      var delta = 0;
      var update = (time) => {

        delta = time - start;
        start = time;
        uniforms.time.value += (delta/100);
        uniforms.resolution.value = [window.innerHeight, window.innerWidth];
        var value = uniforms.resolution.value;
        value[0] = window.innerHeight;
        value[1] = window.innerWidth;

        this.renderer.render(stage);
        requestAnimationFrame(update);
      };

      var run = () => {
        stage.removeChild(bgd);
        stage.removeChild(text);
        stage.removeChild(message);
        EntitySystem.blackBoard.setEntry('score', {score:0});
        this.systems = new GameSystems(this.renderer.type === PIXI.RENDERER_TYPE.WEBGL);
        requestAnimationFrame(this.update);

      };

      stage.interactive = true;
      stage.on('click', run);
      stage.on('touchstart', run);

      stage.addChild(bgd);
      stage.addChild(text);
      stage.addChild(message);

      requestAnimationFrame(update);
    }

    /**
     * Game Loop
     * @param time
     */
    update = (time:number) => {
      this.delta = this.previousTime || time;
      this.previousTime = time;
      this.systems.update((time - this.delta) * 0.001);
      this.renderer.render(this.sprites);
      requestAnimationFrame(this.update);
    };

    /**
     * Resize window
     */
    resize = () => {
      switch (Constants.SCALE_TYPE) {
        case ScaleType.FILL:
          var height = window.innerHeight;
          var width = window.innerWidth;
          this.renderer.resize(width, height);
          break;
        case ScaleType.FIXED:
          this.renderer.view.style.width = window.innerWidth + 'px';
          this.renderer.view.style.height = window.innerHeight + 'px';
          break;
      }
    };

  }
}

